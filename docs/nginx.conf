
# vim /etc/sysctl.conf
# fs.file-max = 65536
# sudo sysctl --system
# vim /etc/security/limits.conf
# nginx       soft    nofile   10000
# nginx       hard    nofile  30000
# vim /etc/nginx/nginx.conf
# worker_rlimit_nofile = 8192
# systemctl restart nginx
# vim /etc/php/7.3/fpm/pool.d/www.conf
# pm.max_children = 100
# pm = ondemand // default: dynamic
# pm.max_children = 16 (original: 5) 1Gb for child process. 
# pm.process_idle_timeout = 100s //exit after inactive 5s
#   below are use only on pm = dynamic.
#   pm.start_servers = 2 (original: 1)
#   pm.min_spare_servers = 1 (original: 1)
#   pm.max_spare_servers = 4 (original: 3)
#   pm.max_requests = 400 (originally commented)
# systemctl status php7.3-fpm
# tail -f /var/log/php7.3-fpm.log
#
# issue! php cannot handle the load and nginx config 
# about worker connection and open file.
# Traffic Load	        Average	    Heavy
# Max Children	         25-35	    40-60
# Process Idle Timeout	 100	    100-150
# Max Requests	         200-350	400-600
#
# redis max number of client reach
# redis create client should only be called per server!
# not pre client connection instance.

#user  nobody;
worker_processes  2; #number of processor.
worker_rlimit_nofile 8192; #worker_connection x number of process.

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;

events {
    worker_connections  4096;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # This will handle the primary web traffic.
    server {
        listen          80;
        server_name     localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #region Link: https://www.nginx.com/resources/wiki/start/topics/recipes/wordpress/
            location = /robots.txt {
                    allow all;
                    log_not_found off;
                    access_log off;
            } 
            
            location = /favicon.ico {
                    log_not_found off;
                    access_log off;
            } 

            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                    expires max;
                    log_not_found off;
            }
        #endregion

        location / {
            root   html;
            index  index.html index.htm index.php;
            # -Added this to fix wp-json 404 on wordpress root is root subdir.
            try_files $uri $uri/ /wordpress/index.php?$args;   
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # -Proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # -Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
           root           html;
           fastcgi_pass   127.0.0.1:9123;
           fastcgi_index  index.php;
           fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
           include        fastcgi_params;
        }

        # -Deny access to .htaccess files, if Apache's document root concurs with nginx's one
        #location ~ /\.ht {
        #    deny  all;
        #}

        # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
        # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
        # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }

    #region USocketNet - MASTER server
        upstream usocketnet_master {
            ##ip_hash; #enable for sticky connection.
            #least_conn; #enable new conn on least traffic.
            server localhost:19091;
            server localhost:19092;
            #add multiple master server. 'server host:port+1'
        } server {
            listen          19090;
            listen          localhost:19090;
            server_name     localhost;

            location / {
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;
                # forwarder here.
                proxy_pass http://usocketnet_master;
            }
        }
    #endregion

    #region USocketNet - CHAT server
        upstream usocketnet_chat {
            #ip_hash; #enable for sticky connection.
            #least_conn; #enable new conn on least traffic.
            server localhost:6061;
            server localhost:6062;
            #add multiple chat server. 'server host:port+1'
        } server {
            listen          6060;
            listen          localhost:6060;
            server_name     localhost;

            location / {
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;
                proxy_pass http://usocketnet_chat;
            }
        }
    #endregion

    #region USocketNet - GAME server
        upstream usocketnet_game {
            #ip_hash; #enable for sticky connection.
            #least_conn; #enable new conn on least traffic.
            server localhost:9091;
            server localhost:9092;
            #add multiple game server. 'server host:port+1'
        } server {
            listen          9090;
            listen          localhost:9090;
            server_name     localhost;

            location / {
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_http_version 1.1;
                proxy_pass http://usocketnet_game;
            }
        }
    #endregion
}